#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
const socketIo = require("socket.io");


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = socketIo(server);

var userClients = [];
var serviceProviderClients = [];

io.on("connection", socket => {

    console.log('socket connected, ', socket.id);
    io.emit('socketServerID', socket.id);

    socket.on('storeAppClientInfo', function (data) {
        let userSocket = userClients.filter(item => item.userId === data.userId);
        if (userSocket.length === 0) {
            let clientInfo = {};
            clientInfo.userId = data.userId;
            clientInfo.socketId = socket.id;
            userClients.push(clientInfo);
        } else
            userSocket[0].socketId = socket.id;

        console.log('app client connected, ', userClients);
    });

    socket.on('storeWebClientInfo', function (data) {
        let serviceProviderSocket = serviceProviderClients.filter(item => item.serviceProviderId === data.serviceProviderId);
        if (serviceProviderSocket.length === 0) {
            let clientInfo = {};
            clientInfo.serviceProviderId = data.serviceProviderId;
            clientInfo.socketId = socket.id;
            serviceProviderClients.push(clientInfo);
        } else
            serviceProviderSocket[0].socketId = socket.id;

        console.log('web client connected, ', serviceProviderClients);
    });

    var pushToWebClient = function (data, socketEventName) {
        let serviceProviderSocket = serviceProviderClients.filter(item => item.serviceProviderId === data.serviceProviderId || item.serviceProviderId === data.serviceProviderId.toString());
        if (serviceProviderSocket.length === 1)
            try {
                io.sockets.connected[serviceProviderSocket[0].socketId].emit(socketEventName);
            } catch (err) {
                console.log("pushToWebClient error ", err);
            }
    };

    var pushToAllWebClient = function (socketEventName) {
        serviceProviderClients.forEach(serviceProviderSocket=>{
            try {
                io.sockets.connected[serviceProviderSocket.socketId].emit(socketEventName);
            } catch (err) {
                console.log("pushToAllAppClient error ", err);
            }
        })
    };

    var pushToAppClient = function (data, socketEventName) {
        let userSocket = userClients.filter(item => item.userId === data.userId);
        if (userSocket.length === 1)
            try {
                io.sockets.connected[userSocket[0].socketId].emit(socketEventName);
            } catch (err) {
                console.log("pushToAppClient error ", err);
            }
    };

    var pushToAllAppClient = function (socketEventName) {
        userClients.forEach(userSocket=>{
            try {
                io.sockets.connected[userSocket.socketId].emit(socketEventName);
            } catch (err) {
                console.log("pushToAllAppClient error ", err);
            }
        })
    };

    socket.on('disconnectWebClient', (data) => {
        let serviceProviderSocket = serviceProviderClients.filter(item => item.serviceProviderId === data.serviceProviderId || item.serviceProviderId === data.serviceProviderId.toString());
        if (serviceProviderSocket.length === 1) {
            io.sockets.connected[serviceProviderSocket[0].socketId].disconnect();
            serviceProviderClients = serviceProviderClients.filter(item => item.serviceProviderId !== data.serviceProviderId || item.serviceProviderId !== data.serviceProviderId.toString());
            console.log('socket disconnectWebClient data ', data);
        }
    });

    socket.on('disconnectAppClient', (data) => {
        let userSocket = userClients.filter(item => item.userId === data.userId);
        if (userSocket.length === 1) {
            io.sockets.connected[userSocket[0].socketId].disconnect();
            userClients = userClients.filter(item => item.userId !== data.userId);
            console.log('socket disconnectAppClient data ', data);
        }
    });

    require('../sockets/appointments')(socket, pushToWebClient, pushToAppClient);
    require('../sockets/serviceProviders')(socket, pushToWebClient, pushToAllAppClient);
    require('../sockets/users')(socket, pushToAllWebClient, pushToAllAppClient);
    require('../sockets/announcements')(socket, pushToAllWebClient, pushToAllAppClient);

    return io;
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
